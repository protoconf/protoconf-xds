load("chain.pinc", "Chain")
load("@envoy//envoy/config/route/v3/route.proto", "RouteConfiguration")
load(
    "@envoy//envoy/config/route/v3/route_components.proto",
    "Route",
    "RouteMatch",
    "RouteAction",
    "DirectResponseAction",
    "RateLimit",
    VirtualHostProto="VirtualHost",
)
load("@envoy//envoy/type/matcher/v3/regex.proto", "RegexMatcher")
load("@envoy//envoy/config/core/v3/base.proto", "DataSource")


def VirtualHost(name, *hooks):
    def set_virtual_host(snapshot, next):
        if not snapshot.routes:
            snapshot.routes = []
        snapshot.routes.append(
            RouteConfiguration(
                name=name, virtual_hosts=[Chain(VirtualHostProto(name=name), *hooks)]
            )
        )
        return next(snapshot)

    return set_virtual_host


def Domains(*domains):
    def set_domains(vhost, next):
        if not vhost.domains:
            vhost.domains = []
        vhost.domains.extend(domains)
        return next(vhost)

    return set_domains


def ToCluster(cluster_name, *hooks):
    def set_to_cluster(vhost, next):
        if not vhost.routes:
            vhost.routes = []
        vhost.routes.append(
            Chain(Route(route=RouteAction(cluster=cluster_name)), *hooks)
        )
        return next(vhost)

    return set_to_cluster


def DirectResponse(body, *hooks, code=200):
    def set_direct_response(vhost, next):
        if not vhost.routes:
            vhost.routes = []
        vhost.routes.append(
            Chain(
                Route(
                    direct_response=DirectResponseAction(
                        status=code, body=DataSource(inline_string=body)
                    )
                ),
                *hooks
            )
        )
        return next(vhost)

    return set_direct_response


def IfPrefix(prefix):
    def set_if_prefix(route, next):
        if not route.match:
            route.match = RouteMatch(safe_regex=RegexMatcher(regex=""))
        route.match.safe_regex.regex = "^{prefix}".format(prefix=prefix)
        return next(route)

    return set_if_prefix


def HostRewrite(host):
    def set_host_rewrite(route, next):
        if not route.route:
            route.route = RouteAction()
        route.route.host_rewrite_literal = host
        return next(route)

    return set_host_rewrite


def SetRouteRateLimit(rate_limit):
    def set_route_rate_limit(route, next):
        if not route.route:
            route.route = RouteAction()
        route.route.rate_limits.append(rate_limit)
        return next(route)

    return set_route_rate_limit


def SetRouteRateLimitKeyHeader(**kwargs):
    return SetRouteRateLimit(
        RateLimit(
            actions=[
                RateLimit.Action(
                    request_headers=RateLimit.Action.RequestHeaders(
                        header_name=header, descriptor_key=key
                    )
                )
                for key, header in kwargs.items()
            ],
        )
    )
