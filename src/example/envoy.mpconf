"""
envoy helpers
"""
load("/google/protobuf/duration.proto", "Duration")
load(
    "@ratelimit//ratelimit/config/ratelimit/v3/rls_conf.proto",
    "RateLimitConfig",
    "RateLimitDescriptor",
    "RateLimitPolicy",
    "RateLimitUnit",
)
load("//xds/lib.pinc", "xds")


ClusterName = "remote_cluster"
RouteName = "local_route"
ListenerName = "listener_0"
ListenerPort = 10000
UpstreamHost = "www.protoconf.dev"
UpstreamPort = 443


def makeRateLimiters():
    return [
        RateLimitConfig(
            domain="local_service",
            descriptors=[
                RateLimitDescriptor(
                    key="remote_address",
                    value="blah",
                    rate_limit=RateLimitPolicy(
                        name="local_service_limit",
                        unit=RateLimitUnit.MINUTE,
                        requests_per_unit=10000,
                    ),
                )
            ],
        )
    ]


# print(makeRateLimiters())


def main():
    return {
        "test-id": xds.Snapshot(
            xds.Cluster(
                "origin",
                xds.LeastRequest,
                xds.DnsDiscovery,
                xds.WithEndpoint(UpstreamHost, UpstreamPort),
                xds.WithConnectTimeout(Duration(seconds=5)),
                xds.UpstreamTLS(sni=UpstreamHost),
            ),
            xds.Cluster(
                "google", xds.WithEndpoint("google.com", 80), xds.DnsDiscovery
            ),
            xds.Listener(
                "default",
                xds.WithTCP("0.0.0.0", 10000),
                xds.WithRdsHTTPRoute("default"),
            ),
            xds.VirtualHost(
                "default",
                xds.Domains("*"),
                xds.ToCluster(
                    "origin", xds.IfPrefix("/protoconf"), xds.HostRewrite(UpstreamHost)
                ),
                xds.ToCluster("google", xds.IfPrefix("/google"), xds.HostRewrite("google.com")),
            ),
            xds.Debug,
        )
    }
